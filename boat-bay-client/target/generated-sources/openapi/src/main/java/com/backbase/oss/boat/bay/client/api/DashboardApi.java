/*
 * Boat Bay Client
 * Endpoints for the boat bay operations
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://github.com/Backbase/backbase-openapi-tools).
 * https://github.com/Backbase/backbase-openapi-tools
 * Do not edit the class manually.
 */

package com.backbase.oss.boat.bay.client.api;

import com.backbase.oss.boat.bay.client.ApiClient;
import com.backbase.oss.boat.bay.client.ApiException;
import com.backbase.oss.boat.bay.client.Pair;

import com.backbase.oss.boat.bay.client.model.BoatCapability;
import com.backbase.oss.boat.bay.client.model.BoatLintReport;
import com.backbase.oss.boat.bay.client.model.BoatLintRule;
import com.backbase.oss.boat.bay.client.model.BoatPortal;
import com.backbase.oss.boat.bay.client.model.BoatPortalDashboard;
import com.backbase.oss.boat.bay.client.model.BoatProduct;
import com.backbase.oss.boat.bay.client.model.BoatProductRelease;
import com.backbase.oss.boat.bay.client.model.BoatService;
import com.backbase.oss.boat.bay.client.model.BoatSpec;
import com.backbase.oss.boat.bay.client.model.BoatTag;

import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.ObjectMapper;

import java.io.IOException;
import java.io.InputStream;
import java.net.URI;
import java.net.http.HttpClient;
import java.net.http.HttpRequest;
import java.net.http.HttpResponse;
import java.time.Duration;
import java.util.function.Consumer;

import java.util.ArrayList;
import java.util.StringJoiner;
import java.util.List;
import java.util.Map;


@javax.annotation.processing.Generated(value = "com.backbase.oss.codegen.java.BoatJavaCodeGen", date = "2021-01-25T07:58:49.054921Z[Europe/London]")
public class DashboardApi {
  private final HttpClient memberVarHttpClient;
  private final ObjectMapper memberVarObjectMapper;
  private final String memberVarBaseUri;
  private final Consumer<HttpRequest.Builder> memberVarInterceptor;
  private final Duration memberVarReadTimeout;
  private final Consumer<HttpResponse<InputStream>> memberVarResponseInterceptor;
  
  public DashboardApi() {
    this(new ApiClient());
  }

  public DashboardApi(ApiClient apiClient) {
    memberVarHttpClient = apiClient.getHttpClient();
    memberVarObjectMapper = apiClient.getObjectMapper();
    memberVarBaseUri = apiClient.getBaseUri();
    memberVarInterceptor = apiClient.getRequestInterceptor();
    memberVarReadTimeout = apiClient.getReadTimeout();
    memberVarResponseInterceptor = apiClient.getResponseInterceptor();
  }

  /**
   * get list of boat portal dashboards
   * 
   * @return List&lt;BoatPortalDashboard&gt;
   * @throws ApiException if fails to make API call
   */
  public List<BoatPortalDashboard> getDashboard () throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/boat/dashboard";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    try {
      localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
      if (memberVarReadTimeout != null) {
        localVarRequestBuilder.timeout(memberVarReadTimeout);
      }
      if (memberVarInterceptor != null) {
        memberVarInterceptor.accept(localVarRequestBuilder);
      }
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
      localVarRequestBuilder.build(),
      HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }          
      if (localVarResponse.statusCode()/ 100 != 2) {
          throw new ApiException(localVarResponse.statusCode(),
              "getDashboard call received non-success response",
              localVarResponse.headers(),
              localVarResponse.body() == null ? null : new String(localVarResponse.body().readAllBytes()));
      }
      return memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<List<BoatPortalDashboard>>() {});
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }
  /**
   * get Lint Report for spec
   * 
   * @param specId spec idenifier (required)
   * @param productKey product idenifier (required)
   * @param portalKey portal idenifier (required)
   * @param refresh refresh idicator (optional)
   * @return BoatLintReport
   * @throws ApiException if fails to make API call
   */
  public BoatLintReport getLintReportForSpec (String specId, String productKey, String portalKey, Boolean refresh) throws ApiException {
    // verify the required parameter 'specId' is set
    if (specId == null) {
        throw new ApiException(400, "Missing the required parameter 'specId' when calling getLintReportForSpec");
    }
    // verify the required parameter 'productKey' is set
    if (productKey == null) {
        throw new ApiException(400, "Missing the required parameter 'productKey' when calling getLintReportForSpec");
    }
    // verify the required parameter 'portalKey' is set
    if (portalKey == null) {
        throw new ApiException(400, "Missing the required parameter 'portalKey' when calling getLintReportForSpec");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/boat/portals/{portalKey}/products/{productKey}/specs/{specId}/lint-report"
        .replace("{specId}", ApiClient.urlEncode(specId.toString()))
        .replace("{productKey}", ApiClient.urlEncode(productKey.toString()))
        .replace("{portalKey}", ApiClient.urlEncode(portalKey.toString()));

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("refresh", refresh));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

    try {
      localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
      if (memberVarReadTimeout != null) {
        localVarRequestBuilder.timeout(memberVarReadTimeout);
      }
      if (memberVarInterceptor != null) {
        memberVarInterceptor.accept(localVarRequestBuilder);
      }
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
      localVarRequestBuilder.build(),
      HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }          
      if (localVarResponse.statusCode()/ 100 != 2) {
          throw new ApiException(localVarResponse.statusCode(),
              "getLintReportForSpec call received non-success response",
              localVarResponse.headers(),
              localVarResponse.body() == null ? null : new String(localVarResponse.body().readAllBytes()));
      }
      return memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<BoatLintReport>() {});
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }
  /**
   * get Portal Products Capabalities
   * 
   * @param productKey product idenifier (required)
   * @param portalKey portal idenifier (required)
   * @param pageable  (optional)
   * @return List&lt;BoatCapability&gt;
   * @throws ApiException if fails to make API call
   */
  public List<BoatCapability> getPortalCapabilities (String productKey, String portalKey, org.springframework.data.domain.Pageable pageable) throws ApiException {
    // verify the required parameter 'productKey' is set
    if (productKey == null) {
        throw new ApiException(400, "Missing the required parameter 'productKey' when calling getPortalCapabilities");
    }
    // verify the required parameter 'portalKey' is set
    if (portalKey == null) {
        throw new ApiException(400, "Missing the required parameter 'portalKey' when calling getPortalCapabilities");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/boat/portals/{portalKey}/products/{productKey}/capabilities"
        .replace("{productKey}", ApiClient.urlEncode(productKey.toString()))
        .replace("{portalKey}", ApiClient.urlEncode(portalKey.toString()));

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("pageable", pageable));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

    try {
      localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
      if (memberVarReadTimeout != null) {
        localVarRequestBuilder.timeout(memberVarReadTimeout);
      }
      if (memberVarInterceptor != null) {
        memberVarInterceptor.accept(localVarRequestBuilder);
      }
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
      localVarRequestBuilder.build(),
      HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }          
      if (localVarResponse.statusCode()/ 100 != 2) {
          throw new ApiException(localVarResponse.statusCode(),
              "getPortalCapabilities call received non-success response",
              localVarResponse.headers(),
              localVarResponse.body() == null ? null : new String(localVarResponse.body().readAllBytes()));
      }
      return memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<List<BoatCapability>>() {});
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }
  /**
   * get list of lint rules
   * 
   * @param portalKey portal idenifier (required)
   * @return List&lt;BoatLintRule&gt;
   * @throws ApiException if fails to make API call
   */
  public List<BoatLintRule> getPortalLintRules (String portalKey) throws ApiException {
    // verify the required parameter 'portalKey' is set
    if (portalKey == null) {
        throw new ApiException(400, "Missing the required parameter 'portalKey' when calling getPortalLintRules");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/boat/portals/{portalKey}/lint-rules"
        .replace("{portalKey}", ApiClient.urlEncode(portalKey.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    try {
      localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
      if (memberVarReadTimeout != null) {
        localVarRequestBuilder.timeout(memberVarReadTimeout);
      }
      if (memberVarInterceptor != null) {
        memberVarInterceptor.accept(localVarRequestBuilder);
      }
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
      localVarRequestBuilder.build(),
      HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }          
      if (localVarResponse.statusCode()/ 100 != 2) {
          throw new ApiException(localVarResponse.statusCode(),
              "getPortalLintRules call received non-success response",
              localVarResponse.headers(),
              localVarResponse.body() == null ? null : new String(localVarResponse.body().readAllBytes()));
      }
      return memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<List<BoatLintRule>>() {});
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }
  /**
   * get products for identified portal
   * 
   * @param portalKey portal idenifier (required)
   * @return List&lt;BoatProduct&gt;
   * @throws ApiException if fails to make API call
   */
  public List<BoatProduct> getPortalProducts (String portalKey) throws ApiException {
    // verify the required parameter 'portalKey' is set
    if (portalKey == null) {
        throw new ApiException(400, "Missing the required parameter 'portalKey' when calling getPortalProducts");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/boat/portals/{portalKey}/products"
        .replace("{portalKey}", ApiClient.urlEncode(portalKey.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    try {
      localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
      if (memberVarReadTimeout != null) {
        localVarRequestBuilder.timeout(memberVarReadTimeout);
      }
      if (memberVarInterceptor != null) {
        memberVarInterceptor.accept(localVarRequestBuilder);
      }
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
      localVarRequestBuilder.build(),
      HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }          
      if (localVarResponse.statusCode()/ 100 != 2) {
          throw new ApiException(localVarResponse.statusCode(),
              "getPortalProducts call received non-success response",
              localVarResponse.headers(),
              localVarResponse.body() == null ? null : new String(localVarResponse.body().readAllBytes()));
      }
      return memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<List<BoatProduct>>() {});
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }
  /**
   * get Portal services for a given product
   * 
   * @param productKey product idenifier (required)
   * @param portalKey portal idenifier (required)
   * @param pageable  (optional)
   * @return List&lt;BoatService&gt;
   * @throws ApiException if fails to make API call
   */
  public List<BoatService> getPortalServices (String productKey, String portalKey, org.springframework.data.domain.Pageable pageable) throws ApiException {
    // verify the required parameter 'productKey' is set
    if (productKey == null) {
        throw new ApiException(400, "Missing the required parameter 'productKey' when calling getPortalServices");
    }
    // verify the required parameter 'portalKey' is set
    if (portalKey == null) {
        throw new ApiException(400, "Missing the required parameter 'portalKey' when calling getPortalServices");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/boat/portals/{portalKey}/products/{productKey}/services"
        .replace("{productKey}", ApiClient.urlEncode(productKey.toString()))
        .replace("{portalKey}", ApiClient.urlEncode(portalKey.toString()));

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("pageable", pageable));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

    try {
      localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
      if (memberVarReadTimeout != null) {
        localVarRequestBuilder.timeout(memberVarReadTimeout);
      }
      if (memberVarInterceptor != null) {
        memberVarInterceptor.accept(localVarRequestBuilder);
      }
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
      localVarRequestBuilder.build(),
      HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }          
      if (localVarResponse.statusCode()/ 100 != 2) {
          throw new ApiException(localVarResponse.statusCode(),
              "getPortalServices call received non-success response",
              localVarResponse.headers(),
              localVarResponse.body() == null ? null : new String(localVarResponse.body().readAllBytes()));
      }
      return memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<List<BoatService>>() {});
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }
  /**
   * get Portal Specs for given product
   * 
   * @param productKey product idenifier (required)
   * @param portalKey portal idenifier (required)
   * @param pageable  (optional)
   * @param capabilityId capablility idenifier (optional)
   * @param productReleaseId product release idenifier (optional)
   * @param serviceId service idenifier (optional)
   * @param grade grade of spec (optional)
   * @param backwardsCompatible backwards compatible indicator (optional)
   * @param changed changed indicator (optional)
   * @return List&lt;BoatSpec&gt;
   * @throws ApiException if fails to make API call
   */
  public List<BoatSpec> getPortalSpecs (String productKey, String portalKey, org.springframework.data.domain.Pageable pageable, String capabilityId, String productReleaseId, String serviceId, String grade, Boolean backwardsCompatible, Boolean changed) throws ApiException {
    // verify the required parameter 'productKey' is set
    if (productKey == null) {
        throw new ApiException(400, "Missing the required parameter 'productKey' when calling getPortalSpecs");
    }
    // verify the required parameter 'portalKey' is set
    if (portalKey == null) {
        throw new ApiException(400, "Missing the required parameter 'portalKey' when calling getPortalSpecs");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/boat/portals/{portalKey}/products/{productKey}/specs"
        .replace("{productKey}", ApiClient.urlEncode(productKey.toString()))
        .replace("{portalKey}", ApiClient.urlEncode(portalKey.toString()));

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("pageable", pageable));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("capabilityId", capabilityId));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("productReleaseId", productReleaseId));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("serviceId", serviceId));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("grade", grade));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("backwardsCompatible", backwardsCompatible));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("changed", changed));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

    try {
      localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
      if (memberVarReadTimeout != null) {
        localVarRequestBuilder.timeout(memberVarReadTimeout);
      }
      if (memberVarInterceptor != null) {
        memberVarInterceptor.accept(localVarRequestBuilder);
      }
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
      localVarRequestBuilder.build(),
      HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }          
      if (localVarResponse.statusCode()/ 100 != 2) {
          throw new ApiException(localVarResponse.statusCode(),
              "getPortalSpecs call received non-success response",
              localVarResponse.headers(),
              localVarResponse.body() == null ? null : new String(localVarResponse.body().readAllBytes()));
      }
      return memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<List<BoatSpec>>() {});
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }
  /**
   * get list of portals
   * 
   * @return List&lt;BoatPortal&gt;
   * @throws ApiException if fails to make API call
   */
  public List<BoatPortal> getPortals () throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/boat/portals";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    try {
      localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
      if (memberVarReadTimeout != null) {
        localVarRequestBuilder.timeout(memberVarReadTimeout);
      }
      if (memberVarInterceptor != null) {
        memberVarInterceptor.accept(localVarRequestBuilder);
      }
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
      localVarRequestBuilder.build(),
      HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }          
      if (localVarResponse.statusCode()/ 100 != 2) {
          throw new ApiException(localVarResponse.statusCode(),
              "getPortals call received non-success response",
              localVarResponse.headers(),
              localVarResponse.body() == null ? null : new String(localVarResponse.body().readAllBytes()));
      }
      return memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<List<BoatPortal>>() {});
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }
  /**
   * get product for dashboard project
   * 
   * @param projectKey project idenifier (required)
   * @param productKey product idenifier (required)
   * @return BoatProduct
   * @throws ApiException if fails to make API call
   */
  public BoatProduct getProductDashboard (String projectKey, String productKey) throws ApiException {
    // verify the required parameter 'projectKey' is set
    if (projectKey == null) {
        throw new ApiException(400, "Missing the required parameter 'projectKey' when calling getProductDashboard");
    }
    // verify the required parameter 'productKey' is set
    if (productKey == null) {
        throw new ApiException(400, "Missing the required parameter 'productKey' when calling getProductDashboard");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/boat/dashboard/{projectKey}/{productKey}"
        .replace("{projectKey}", ApiClient.urlEncode(projectKey.toString()))
        .replace("{productKey}", ApiClient.urlEncode(productKey.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    try {
      localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
      if (memberVarReadTimeout != null) {
        localVarRequestBuilder.timeout(memberVarReadTimeout);
      }
      if (memberVarInterceptor != null) {
        memberVarInterceptor.accept(localVarRequestBuilder);
      }
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
      localVarRequestBuilder.build(),
      HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }          
      if (localVarResponse.statusCode()/ 100 != 2) {
          throw new ApiException(localVarResponse.statusCode(),
              "getProductDashboard call received non-success response",
              localVarResponse.headers(),
              localVarResponse.body() == null ? null : new String(localVarResponse.body().readAllBytes()));
      }
      return memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<BoatProduct>() {});
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }
  /**
   * get specs for product release
   * 
   * @param releaseKey key for product release (required)
   * @param productKey id of product (required)
   * @param portalKey portal idenifier (required)
   * @return List&lt;BoatSpec&gt;
   * @throws ApiException if fails to make API call
   */
  public List<BoatSpec> getProductReleaseSpecs (String releaseKey, String productKey, String portalKey) throws ApiException {
    // verify the required parameter 'releaseKey' is set
    if (releaseKey == null) {
        throw new ApiException(400, "Missing the required parameter 'releaseKey' when calling getProductReleaseSpecs");
    }
    // verify the required parameter 'productKey' is set
    if (productKey == null) {
        throw new ApiException(400, "Missing the required parameter 'productKey' when calling getProductReleaseSpecs");
    }
    // verify the required parameter 'portalKey' is set
    if (portalKey == null) {
        throw new ApiException(400, "Missing the required parameter 'portalKey' when calling getProductReleaseSpecs");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/boat/portals/{portalKey}/products/{productKey}/releases/{releaseKey}/specs"
        .replace("{releaseKey}", ApiClient.urlEncode(releaseKey.toString()))
        .replace("{productKey}", ApiClient.urlEncode(productKey.toString()))
        .replace("{portalKey}", ApiClient.urlEncode(portalKey.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    try {
      localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
      if (memberVarReadTimeout != null) {
        localVarRequestBuilder.timeout(memberVarReadTimeout);
      }
      if (memberVarInterceptor != null) {
        memberVarInterceptor.accept(localVarRequestBuilder);
      }
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
      localVarRequestBuilder.build(),
      HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }          
      if (localVarResponse.statusCode()/ 100 != 2) {
          throw new ApiException(localVarResponse.statusCode(),
              "getProductReleaseSpecs call received non-success response",
              localVarResponse.headers(),
              localVarResponse.body() == null ? null : new String(localVarResponse.body().readAllBytes()));
      }
      return memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<List<BoatSpec>>() {});
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }
  /**
   * get product releases
   * 
   * @param productKey id of product (required)
   * @param portalKey portal idenifier (required)
   * @return List&lt;BoatProductRelease&gt;
   * @throws ApiException if fails to make API call
   */
  public List<BoatProductRelease> getProductReleases (String productKey, String portalKey) throws ApiException {
    // verify the required parameter 'productKey' is set
    if (productKey == null) {
        throw new ApiException(400, "Missing the required parameter 'productKey' when calling getProductReleases");
    }
    // verify the required parameter 'portalKey' is set
    if (portalKey == null) {
        throw new ApiException(400, "Missing the required parameter 'portalKey' when calling getProductReleases");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/boat/portals/{portalKey}/products/{productKey}/releases"
        .replace("{productKey}", ApiClient.urlEncode(productKey.toString()))
        .replace("{portalKey}", ApiClient.urlEncode(portalKey.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    try {
      localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
      if (memberVarReadTimeout != null) {
        localVarRequestBuilder.timeout(memberVarReadTimeout);
      }
      if (memberVarInterceptor != null) {
        memberVarInterceptor.accept(localVarRequestBuilder);
      }
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
      localVarRequestBuilder.build(),
      HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }          
      if (localVarResponse.statusCode()/ 100 != 2) {
          throw new ApiException(localVarResponse.statusCode(),
              "getProductReleases call received non-success response",
              localVarResponse.headers(),
              localVarResponse.body() == null ? null : new String(localVarResponse.body().readAllBytes()));
      }
      return memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<List<BoatProductRelease>>() {});
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }
  /**
   * get tags for product
   * 
   * @param portalKey portal idenifier (required)
   * @param productKey product idenifier (required)
   * @return List&lt;BoatTag&gt;
   * @throws ApiException if fails to make API call
   */
  public List<BoatTag> getProductTags (String portalKey, String productKey) throws ApiException {
    // verify the required parameter 'portalKey' is set
    if (portalKey == null) {
        throw new ApiException(400, "Missing the required parameter 'portalKey' when calling getProductTags");
    }
    // verify the required parameter 'productKey' is set
    if (productKey == null) {
        throw new ApiException(400, "Missing the required parameter 'productKey' when calling getProductTags");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/boat/portals/{portalKey}/products/{productKey}/tags"
        .replace("{portalKey}", ApiClient.urlEncode(portalKey.toString()))
        .replace("{productKey}", ApiClient.urlEncode(productKey.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    try {
      localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
      if (memberVarReadTimeout != null) {
        localVarRequestBuilder.timeout(memberVarReadTimeout);
      }
      if (memberVarInterceptor != null) {
        memberVarInterceptor.accept(localVarRequestBuilder);
      }
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
      localVarRequestBuilder.build(),
      HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }          
      if (localVarResponse.statusCode()/ 100 != 2) {
          throw new ApiException(localVarResponse.statusCode(),
              "getProductTags call received non-success response",
              localVarResponse.headers(),
              localVarResponse.body() == null ? null : new String(localVarResponse.body().readAllBytes()));
      }
      return memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<List<BoatTag>>() {});
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }
  /**
   * update lint rule for portal
   * 
   * @param lintRuleId id of portals lint rule (required)
   * @param portalKey portal idenifier (required)
   * @param boatLintRule  (optional)
   * @throws ApiException if fails to make API call
   */
  public void updatePortalLintRule (String lintRuleId, String portalKey, BoatLintRule boatLintRule) throws ApiException {
    // verify the required parameter 'lintRuleId' is set
    if (lintRuleId == null) {
        throw new ApiException(400, "Missing the required parameter 'lintRuleId' when calling updatePortalLintRule");
    }
    // verify the required parameter 'portalKey' is set
    if (portalKey == null) {
        throw new ApiException(400, "Missing the required parameter 'portalKey' when calling updatePortalLintRule");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/boat/portals/{portalKey}/lint-rules/{lintRuleId}"
        .replace("{lintRuleId}", ApiClient.urlEncode(lintRuleId.toString()))
        .replace("{portalKey}", ApiClient.urlEncode(portalKey.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(boatLintRule);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
      if (memberVarReadTimeout != null) {
        localVarRequestBuilder.timeout(memberVarReadTimeout);
      }
      if (memberVarInterceptor != null) {
        memberVarInterceptor.accept(localVarRequestBuilder);
      }
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
      localVarRequestBuilder.build(),
      HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }          
      if (localVarResponse.statusCode()/ 100 != 2) {
          throw new ApiException(localVarResponse.statusCode(),
              "updatePortalLintRule call received non-success response",
              localVarResponse.headers(),
              localVarResponse.body() == null ? null : new String(localVarResponse.body().readAllBytes()));
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }
}

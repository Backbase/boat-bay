/**
 * Boat Bay Dashboard Server API
 * Endpoints for the boat bay operations
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://github.com/Backbase/backbase-openapi-tools).
 * https://github.com/Backbase/backbase-openapi-tools
 * Do not edit the class manually.
 */

/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent, HttpParameterCodec }       from '@angular/common/http';
import { CustomHttpParameterCodec }                          from '../encoder';
import { Observable }                                        from 'rxjs';

import { BoatCapability } from '../model/models';
import { BoatLintReport } from '../model/models';
import { BoatLintRule } from '../model/models';
import { BoatPortal } from '../model/models';
import { BoatProduct } from '../model/models';
import { BoatProductRelease } from '../model/models';
import { BoatService } from '../model/models';
import { BoatSpec } from '../model/models';
import { BoatTag } from '../model/models';

import { BOAT_DASHBOARD_BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { BoatDashboardConfiguration }                                     from '../configuration';


export interface DownloadSpecRequestParams {
    /** Portal Identifier */
    ["portalKey"]: string;
    /** Product Identifier */
    ["productKey"]: string;
    /** Capability Identifier */
    ["capabilityKey"]: string;
    /** Service Identifier */
    ["serviceKey"]: string;
    /** Spec Identifier */
    ["specKey"]: string;
    /** Spec Version */
    ["version"]: string;
}

export interface GetDiffReportRequestParams {
    /** Portal Identifier */
    ["portalKey"]: string;
    /** Product Identifier */
    ["productKey"]: string;
    /** Identifies first comparitable api */
    ["spec1Id"]: number;
    /** Identifies second comparitable api */
    ["spec2Id"]: number;
}

export interface GetLintReportForSpecRequestParams {
    /** Portal Identifier */
    ["portalKey"]: string;
    /** Product Identifier */
    ["productKey"]: string;
    /** Unique Spec Identifier */
    ["specId"]: number;
    /** refresh idicator */
    ["refresh"]?: boolean;
}

export interface GetPortalCapabilitiesRequestParams {
    /** Portal Identifier */
    ["portalKey"]: string;
    /** Product Identifier */
    ["productKey"]: string;
    ["page"]: number;
    ["size"]: number;
    ["sort"]: Array<string>;
}

export interface GetPortalLintRulesRequestParams {
    /** Portal Identifier */
    ["portalKey"]: string;
}

export interface GetPortalProductRequestParams {
    /** Portal Identifier */
    ["portalKey"]: string;
    /** Product Identifier */
    ["productKey"]: string;
}

export interface GetPortalProductsRequestParams {
    /** Portal Identifier */
    ["portalKey"]: string;
    ["page"]: number;
    ["size"]: number;
    ["sort"]: Array<string>;
}

export interface GetPortalServicesRequestParams {
    /** Portal Identifier */
    ["portalKey"]: string;
    /** Product Identifier */
    ["productKey"]: string;
    ["page"]: number;
    ["size"]: number;
    ["sort"]: Array<string>;
}

export interface GetPortalSpecsRequestParams {
    /** Portal Identifier */
    ["portalKey"]: string;
    /** Product Identifier */
    ["productKey"]: string;
    ["page"]: number;
    ["size"]: number;
    ["sort"]: Array<string>;
    /** capablility idenifier */
    ["capabilityKeys"]?: Array<string>;
    /** product release idenifier */
    ["productReleaseKey"]?: string;
    /** service idenifier */
    ["serviceKeys"]?: Array<string>;
    /** grade of spec */
    ["grade"]?: string;
    /** backwards compatible indicator */
    ["backwardsCompatible"]?: boolean;
    /** changed indicator */
    ["changed"]?: boolean;
}

export interface GetProductReleaseSpecsRequestParams {
    /** Portal Identifier */
    ["portalKey"]: string;
    /** Product Identifier */
    ["productKey"]: string;
    /** Product Release Identifier */
    ["releaseKey"]: string;
}

export interface GetProductReleasesRequestParams {
    /** Portal Identifier */
    ["portalKey"]: string;
    /** Product Identifier */
    ["productKey"]: string;
}

export interface GetProductTagsRequestParams {
    /** Portal Identifier */
    ["portalKey"]: string;
    /** Product Identifier */
    ["productKey"]: string;
}

export interface GetSpecRequestParams {
    /** Portal Identifier */
    ["portalKey"]: string;
    /** Product Identifier */
    ["productKey"]: string;
    /** Capability Identifier */
    ["capabilityKey"]: string;
    /** Service Identifier */
    ["serviceKey"]: string;
    /** Spec Identifier */
    ["specKey"]: string;
    /** Spec Version */
    ["version"]: string;
}

export interface UpdatePortalLintRuleRequestParams {
    /** id of portals lint rule */
    ["lintRuleId"]: string;
    /** Portal Identifier */
    ["portalKey"]: string;
    ["boatLintRule"]?: BoatLintRule;
}


@Injectable({
  providedIn: 'root'
})
export class DashboardHttpService {

    protected basePath = '';
    public defaultHeaders = new HttpHeaders();
    public configuration = new BoatDashboardConfiguration();
    public encoder: HttpParameterCodec;

    constructor(protected httpClient: HttpClient, @Optional() @Inject(BOAT_DASHBOARD_BASE_PATH) basePath: string, @Optional() configuration: BoatDashboardConfiguration) {
        if (configuration) {
            this.configuration = configuration;
        }
        if (typeof this.configuration.basePath !== 'string') {
            if (typeof basePath !== 'string') {
                basePath = this.basePath;
            }
            this.configuration.basePath = basePath;
        }
        this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();
    }


    private addToHttpParams(httpParams: HttpParams, value: any, key?: string): HttpParams {
        if (typeof value === "object" && value instanceof Date === false) {
            httpParams = this.addToHttpParamsRecursive(httpParams, value);
        } else {
            httpParams = this.addToHttpParamsRecursive(httpParams, value, key);
        }
        return httpParams;
    }

    private addToHttpParamsRecursive(httpParams: HttpParams, value?: any, key?: string): HttpParams {
        if (value == null) {
            return httpParams;
        }

        if (typeof value === "object") {
            if (Array.isArray(value)) {
                (value as any[]).forEach( elem => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));
            } else if (value instanceof Date) {
                if (key != null) {
                    httpParams = httpParams.append(key,
                        (value as Date).toISOString().substr(0, 10));
                } else {
                   throw Error("key may not be null if value is Date");
                }
            } else {
                Object.keys(value).forEach( k => httpParams = this.addToHttpParamsRecursive(
                    httpParams, value[k], key != null ? `${key}.${k}` : k));
            }
        } else if (key != null) {
            httpParams = httpParams.append(key, value);
        } else {
            throw Error("key may not be null if value is not object or array");
        }
        return httpParams;
    }

    /**
     * get spec as openapi
     * @param requestParameters
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public downloadSpec(requestParameters: DownloadSpecRequestParams, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/vnd.oai.openapi'}): Observable<Array<string>>;
    public downloadSpec(requestParameters: DownloadSpecRequestParams, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/vnd.oai.openapi'}): Observable<HttpResponse<Array<string>>>;
    public downloadSpec(requestParameters: DownloadSpecRequestParams, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/vnd.oai.openapi'}): Observable<HttpEvent<Array<string>>>;
    public downloadSpec(requestParameters: DownloadSpecRequestParams, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/vnd.oai.openapi'}): Observable<any> {
        const _portalKey = requestParameters["portalKey"];
        if (_portalKey === null || _portalKey === undefined) {
            throw new Error('Required parameter portalKey was null or undefined when calling downloadSpec.');
        }
        const _productKey = requestParameters["productKey"];
        if (_productKey === null || _productKey === undefined) {
            throw new Error('Required parameter productKey was null or undefined when calling downloadSpec.');
        }
        const _capabilityKey = requestParameters["capabilityKey"];
        if (_capabilityKey === null || _capabilityKey === undefined) {
            throw new Error('Required parameter capabilityKey was null or undefined when calling downloadSpec.');
        }
        const _serviceKey = requestParameters["serviceKey"];
        if (_serviceKey === null || _serviceKey === undefined) {
            throw new Error('Required parameter serviceKey was null or undefined when calling downloadSpec.');
        }
        const _specKey = requestParameters["specKey"];
        if (_specKey === null || _specKey === undefined) {
            throw new Error('Required parameter specKey was null or undefined when calling downloadSpec.');
        }
        const _version = requestParameters["version"];
        if (_version === null || _version === undefined) {
            throw new Error('Required parameter version was null or undefined when calling downloadSpec.');
        }

        let headers = this.defaultHeaders;

        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'application/vnd.oai.openapi'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }


        let responseType: 'text' | 'json' = 'json';
        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }

        return this.httpClient.get<Array<string>>(`${this.configuration.basePath}/api/boat/portals/${encodeURIComponent(String(_portalKey))}/products/${encodeURIComponent(String(_productKey))}/capabilities/${encodeURIComponent(String(_capabilityKey))}/services/${encodeURIComponent(String(_serviceKey))}/specs/${encodeURIComponent(String(_specKey))}/${encodeURIComponent(String(_version))}/download`,
            {
                responseType: <any>responseType,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    public downloadSpecUrl(requestParameters: DownloadSpecRequestParams): string {
        const _portalKey = requestParameters["portalKey"];
        if (_portalKey === null || _portalKey === undefined) {
            throw new Error('Required parameter portalKey was null or undefined when calling downloadSpec.');
        }
        const _productKey = requestParameters["productKey"];
        if (_productKey === null || _productKey === undefined) {
            throw new Error('Required parameter productKey was null or undefined when calling downloadSpec.');
        }
        const _capabilityKey = requestParameters["capabilityKey"];
        if (_capabilityKey === null || _capabilityKey === undefined) {
            throw new Error('Required parameter capabilityKey was null or undefined when calling downloadSpec.');
        }
        const _serviceKey = requestParameters["serviceKey"];
        if (_serviceKey === null || _serviceKey === undefined) {
            throw new Error('Required parameter serviceKey was null or undefined when calling downloadSpec.');
        }
        const _specKey = requestParameters["specKey"];
        if (_specKey === null || _specKey === undefined) {
            throw new Error('Required parameter specKey was null or undefined when calling downloadSpec.');
        }
        const _version = requestParameters["version"];
        if (_version === null || _version === undefined) {
            throw new Error('Required parameter version was null or undefined when calling downloadSpec.');
        }
        return `${this.configuration.basePath}/api/boat/portals/${encodeURIComponent(String(_portalKey))}/products/${encodeURIComponent(String(_productKey))}/capabilities/${encodeURIComponent(String(_capabilityKey))}/services/${encodeURIComponent(String(_serviceKey))}/specs/${encodeURIComponent(String(_specKey))}/${encodeURIComponent(String(_version))}/download`;
    }

    /**
     * Get diff report for spec as html
     * @param requestParameters
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getDiffReport(requestParameters: GetDiffReportRequestParams, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'text/html'}): Observable<string>;
    public getDiffReport(requestParameters: GetDiffReportRequestParams, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'text/html'}): Observable<HttpResponse<string>>;
    public getDiffReport(requestParameters: GetDiffReportRequestParams, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'text/html'}): Observable<HttpEvent<string>>;
    public getDiffReport(requestParameters: GetDiffReportRequestParams, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'text/html'}): Observable<any> {
        const _portalKey = requestParameters["portalKey"];
        if (_portalKey === null || _portalKey === undefined) {
            throw new Error('Required parameter portalKey was null or undefined when calling getDiffReport.');
        }
        const _productKey = requestParameters["productKey"];
        if (_productKey === null || _productKey === undefined) {
            throw new Error('Required parameter productKey was null or undefined when calling getDiffReport.');
        }
        const _spec1Id = requestParameters["spec1Id"];
        if (_spec1Id === null || _spec1Id === undefined) {
            throw new Error('Required parameter spec1Id was null or undefined when calling getDiffReport.');
        }
        const _spec2Id = requestParameters["spec2Id"];
        if (_spec2Id === null || _spec2Id === undefined) {
            throw new Error('Required parameter spec2Id was null or undefined when calling getDiffReport.');
        }

        let queryParameters = new HttpParams({encoder: this.encoder});
        if (_spec1Id !== undefined && _spec1Id !== null) {
          queryParameters = this.addToHttpParams(queryParameters,
            <any>_spec1Id, 'spec1Id');
        }
        if (_spec2Id !== undefined && _spec2Id !== null) {
          queryParameters = this.addToHttpParams(queryParameters,
            <any>_spec2Id, 'spec2Id');
        }

        let headers = this.defaultHeaders;

        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'text/html'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }


        let responseType: 'text' | 'json' = 'json';
        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }

        return this.httpClient.get<string>(`${this.configuration.basePath}/api/boat/portals/${encodeURIComponent(String(_portalKey))}/products/${encodeURIComponent(String(_productKey))}/diff-report.html`,
            {
                params: queryParameters,
                responseType: <any>responseType,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    public getDiffReportUrl(requestParameters: GetDiffReportRequestParams): string {
        const _portalKey = requestParameters["portalKey"];
        if (_portalKey === null || _portalKey === undefined) {
            throw new Error('Required parameter portalKey was null or undefined when calling getDiffReport.');
        }
        const _productKey = requestParameters["productKey"];
        if (_productKey === null || _productKey === undefined) {
            throw new Error('Required parameter productKey was null or undefined when calling getDiffReport.');
        }
        const _spec1Id = requestParameters["spec1Id"];
        if (_spec1Id === null || _spec1Id === undefined) {
            throw new Error('Required parameter spec1Id was null or undefined when calling getDiffReport.');
        }
        const _spec2Id = requestParameters["spec2Id"];
        if (_spec2Id === null || _spec2Id === undefined) {
            throw new Error('Required parameter spec2Id was null or undefined when calling getDiffReport.');
        }
        let queryParameters = new HttpParams({encoder: this.encoder});
        if (_spec1Id !== undefined && _spec1Id !== null) {
          queryParameters = this.addToHttpParams(queryParameters,
            <any>_spec1Id, 'spec1Id');
        }
        if (_spec2Id !== undefined && _spec2Id !== null) {
          queryParameters = this.addToHttpParams(queryParameters,
            <any>_spec2Id, 'spec2Id');
        }
        const queryString = queryParameters.toString();
        return `${this.configuration.basePath}/api/boat/portals/${encodeURIComponent(String(_portalKey))}/products/${encodeURIComponent(String(_productKey))}/diff-report.html${queryString ? `?${queryString}` : ''}`;
    }

    /**
     * get Lint Report for spec
     * @param requestParameters
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getLintReportForSpec(requestParameters: GetLintReportForSpecRequestParams, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<BoatLintReport>;
    public getLintReportForSpec(requestParameters: GetLintReportForSpecRequestParams, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpResponse<BoatLintReport>>;
    public getLintReportForSpec(requestParameters: GetLintReportForSpecRequestParams, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpEvent<BoatLintReport>>;
    public getLintReportForSpec(requestParameters: GetLintReportForSpecRequestParams, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json'}): Observable<any> {
        const _portalKey = requestParameters["portalKey"];
        if (_portalKey === null || _portalKey === undefined) {
            throw new Error('Required parameter portalKey was null or undefined when calling getLintReportForSpec.');
        }
        const _productKey = requestParameters["productKey"];
        if (_productKey === null || _productKey === undefined) {
            throw new Error('Required parameter productKey was null or undefined when calling getLintReportForSpec.');
        }
        const _specId = requestParameters["specId"];
        if (_specId === null || _specId === undefined) {
            throw new Error('Required parameter specId was null or undefined when calling getLintReportForSpec.');
        }
        const _refresh = requestParameters["refresh"];

        let queryParameters = new HttpParams({encoder: this.encoder});
        if (_refresh !== undefined && _refresh !== null) {
          queryParameters = this.addToHttpParams(queryParameters,
            <any>_refresh, 'refresh');
        }

        let headers = this.defaultHeaders;

        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }


        let responseType: 'text' | 'json' = 'json';
        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }

        return this.httpClient.get<BoatLintReport>(`${this.configuration.basePath}/api/boat/portals/${encodeURIComponent(String(_portalKey))}/products/${encodeURIComponent(String(_productKey))}/specs/${encodeURIComponent(String(_specId))}/lint-report`,
            {
                params: queryParameters,
                responseType: <any>responseType,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    public getLintReportForSpecUrl(requestParameters: GetLintReportForSpecRequestParams): string {
        const _portalKey = requestParameters["portalKey"];
        if (_portalKey === null || _portalKey === undefined) {
            throw new Error('Required parameter portalKey was null or undefined when calling getLintReportForSpec.');
        }
        const _productKey = requestParameters["productKey"];
        if (_productKey === null || _productKey === undefined) {
            throw new Error('Required parameter productKey was null or undefined when calling getLintReportForSpec.');
        }
        const _specId = requestParameters["specId"];
        if (_specId === null || _specId === undefined) {
            throw new Error('Required parameter specId was null or undefined when calling getLintReportForSpec.');
        }
        const _refresh = requestParameters["refresh"];
        let queryParameters = new HttpParams({encoder: this.encoder});
        if (_refresh !== undefined && _refresh !== null) {
          queryParameters = this.addToHttpParams(queryParameters,
            <any>_refresh, 'refresh');
        }
        const queryString = queryParameters.toString();
        return `${this.configuration.basePath}/api/boat/portals/${encodeURIComponent(String(_portalKey))}/products/${encodeURIComponent(String(_productKey))}/specs/${encodeURIComponent(String(_specId))}/lint-report${queryString ? `?${queryString}` : ''}`;
    }

    /**
     * get Portal Products Capabalities
     * @param requestParameters
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getPortalCapabilities(requestParameters: GetPortalCapabilitiesRequestParams, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<Array<BoatCapability>>;
    public getPortalCapabilities(requestParameters: GetPortalCapabilitiesRequestParams, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpResponse<Array<BoatCapability>>>;
    public getPortalCapabilities(requestParameters: GetPortalCapabilitiesRequestParams, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpEvent<Array<BoatCapability>>>;
    public getPortalCapabilities(requestParameters: GetPortalCapabilitiesRequestParams, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json'}): Observable<any> {
        const _portalKey = requestParameters["portalKey"];
        if (_portalKey === null || _portalKey === undefined) {
            throw new Error('Required parameter portalKey was null or undefined when calling getPortalCapabilities.');
        }
        const _productKey = requestParameters["productKey"];
        if (_productKey === null || _productKey === undefined) {
            throw new Error('Required parameter productKey was null or undefined when calling getPortalCapabilities.');
        }
        const _page = requestParameters["page"];
        if (_page === null || _page === undefined) {
            throw new Error('Required parameter page was null or undefined when calling getPortalCapabilities.');
        }
        const _size = requestParameters["size"];
        if (_size === null || _size === undefined) {
            throw new Error('Required parameter size was null or undefined when calling getPortalCapabilities.');
        }
        const _sort = requestParameters["sort"];
        if (_sort === null || _sort === undefined) {
            throw new Error('Required parameter sort was null or undefined when calling getPortalCapabilities.');
        }

        let queryParameters = new HttpParams({encoder: this.encoder});
        if (_page !== undefined && _page !== null) {
          queryParameters = this.addToHttpParams(queryParameters,
            <any>_page, 'page');
        }
        if (_size !== undefined && _size !== null) {
          queryParameters = this.addToHttpParams(queryParameters,
            <any>_size, 'size');
        }
        if (_sort) {
            _sort.forEach((element) => {
                queryParameters = this.addToHttpParams(queryParameters,
                  <any>element, 'sort');
            })
        }

        let headers = this.defaultHeaders;

        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }


        let responseType: 'text' | 'json' = 'json';
        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }

        return this.httpClient.get<Array<BoatCapability>>(`${this.configuration.basePath}/api/boat/portals/${encodeURIComponent(String(_portalKey))}/products/${encodeURIComponent(String(_productKey))}/capabilities`,
            {
                params: queryParameters,
                responseType: <any>responseType,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    public getPortalCapabilitiesUrl(requestParameters: GetPortalCapabilitiesRequestParams): string {
        const _portalKey = requestParameters["portalKey"];
        if (_portalKey === null || _portalKey === undefined) {
            throw new Error('Required parameter portalKey was null or undefined when calling getPortalCapabilities.');
        }
        const _productKey = requestParameters["productKey"];
        if (_productKey === null || _productKey === undefined) {
            throw new Error('Required parameter productKey was null or undefined when calling getPortalCapabilities.');
        }
        const _page = requestParameters["page"];
        if (_page === null || _page === undefined) {
            throw new Error('Required parameter page was null or undefined when calling getPortalCapabilities.');
        }
        const _size = requestParameters["size"];
        if (_size === null || _size === undefined) {
            throw new Error('Required parameter size was null or undefined when calling getPortalCapabilities.');
        }
        const _sort = requestParameters["sort"];
        if (_sort === null || _sort === undefined) {
            throw new Error('Required parameter sort was null or undefined when calling getPortalCapabilities.');
        }
        let queryParameters = new HttpParams({encoder: this.encoder});
        if (_page !== undefined && _page !== null) {
          queryParameters = this.addToHttpParams(queryParameters,
            <any>_page, 'page');
        }
        if (_size !== undefined && _size !== null) {
          queryParameters = this.addToHttpParams(queryParameters,
            <any>_size, 'size');
        }
        if (_sort) {
            _sort.forEach((element) => {
                queryParameters = this.addToHttpParams(queryParameters,
                  <any>element, 'sort');
            })
        }
        const queryString = queryParameters.toString();
        return `${this.configuration.basePath}/api/boat/portals/${encodeURIComponent(String(_portalKey))}/products/${encodeURIComponent(String(_productKey))}/capabilities${queryString ? `?${queryString}` : ''}`;
    }

    /**
     * get list of lint rules
     * @param requestParameters
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getPortalLintRules(requestParameters: GetPortalLintRulesRequestParams, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<Array<BoatLintRule>>;
    public getPortalLintRules(requestParameters: GetPortalLintRulesRequestParams, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpResponse<Array<BoatLintRule>>>;
    public getPortalLintRules(requestParameters: GetPortalLintRulesRequestParams, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpEvent<Array<BoatLintRule>>>;
    public getPortalLintRules(requestParameters: GetPortalLintRulesRequestParams, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json'}): Observable<any> {
        const _portalKey = requestParameters["portalKey"];
        if (_portalKey === null || _portalKey === undefined) {
            throw new Error('Required parameter portalKey was null or undefined when calling getPortalLintRules.');
        }

        let headers = this.defaultHeaders;

        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }


        let responseType: 'text' | 'json' = 'json';
        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }

        return this.httpClient.get<Array<BoatLintRule>>(`${this.configuration.basePath}/api/boat/portals/${encodeURIComponent(String(_portalKey))}/lint-rules`,
            {
                responseType: <any>responseType,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    public getPortalLintRulesUrl(requestParameters: GetPortalLintRulesRequestParams): string {
        const _portalKey = requestParameters["portalKey"];
        if (_portalKey === null || _portalKey === undefined) {
            throw new Error('Required parameter portalKey was null or undefined when calling getPortalLintRules.');
        }
        return `${this.configuration.basePath}/api/boat/portals/${encodeURIComponent(String(_portalKey))}/lint-rules`;
    }

    /**
     * Get Product for identified Portal
     * @param requestParameters
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getPortalProduct(requestParameters: GetPortalProductRequestParams, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<BoatProduct>;
    public getPortalProduct(requestParameters: GetPortalProductRequestParams, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpResponse<BoatProduct>>;
    public getPortalProduct(requestParameters: GetPortalProductRequestParams, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpEvent<BoatProduct>>;
    public getPortalProduct(requestParameters: GetPortalProductRequestParams, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json'}): Observable<any> {
        const _portalKey = requestParameters["portalKey"];
        if (_portalKey === null || _portalKey === undefined) {
            throw new Error('Required parameter portalKey was null or undefined when calling getPortalProduct.');
        }
        const _productKey = requestParameters["productKey"];
        if (_productKey === null || _productKey === undefined) {
            throw new Error('Required parameter productKey was null or undefined when calling getPortalProduct.');
        }

        let headers = this.defaultHeaders;

        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }


        let responseType: 'text' | 'json' = 'json';
        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }

        return this.httpClient.get<BoatProduct>(`${this.configuration.basePath}/api/boat/portals/${encodeURIComponent(String(_portalKey))}/products/${encodeURIComponent(String(_productKey))}`,
            {
                responseType: <any>responseType,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    public getPortalProductUrl(requestParameters: GetPortalProductRequestParams): string {
        const _portalKey = requestParameters["portalKey"];
        if (_portalKey === null || _portalKey === undefined) {
            throw new Error('Required parameter portalKey was null or undefined when calling getPortalProduct.');
        }
        const _productKey = requestParameters["productKey"];
        if (_productKey === null || _productKey === undefined) {
            throw new Error('Required parameter productKey was null or undefined when calling getPortalProduct.');
        }
        return `${this.configuration.basePath}/api/boat/portals/${encodeURIComponent(String(_portalKey))}/products/${encodeURIComponent(String(_productKey))}`;
    }

    /**
     * Get List fo Product for identified Portal
     * @param requestParameters
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getPortalProducts(requestParameters: GetPortalProductsRequestParams, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<Array<BoatProduct>>;
    public getPortalProducts(requestParameters: GetPortalProductsRequestParams, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpResponse<Array<BoatProduct>>>;
    public getPortalProducts(requestParameters: GetPortalProductsRequestParams, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpEvent<Array<BoatProduct>>>;
    public getPortalProducts(requestParameters: GetPortalProductsRequestParams, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json'}): Observable<any> {
        const _portalKey = requestParameters["portalKey"];
        if (_portalKey === null || _portalKey === undefined) {
            throw new Error('Required parameter portalKey was null or undefined when calling getPortalProducts.');
        }
        const _page = requestParameters["page"];
        if (_page === null || _page === undefined) {
            throw new Error('Required parameter page was null or undefined when calling getPortalProducts.');
        }
        const _size = requestParameters["size"];
        if (_size === null || _size === undefined) {
            throw new Error('Required parameter size was null or undefined when calling getPortalProducts.');
        }
        const _sort = requestParameters["sort"];
        if (_sort === null || _sort === undefined) {
            throw new Error('Required parameter sort was null or undefined when calling getPortalProducts.');
        }

        let queryParameters = new HttpParams({encoder: this.encoder});
        if (_page !== undefined && _page !== null) {
          queryParameters = this.addToHttpParams(queryParameters,
            <any>_page, 'page');
        }
        if (_size !== undefined && _size !== null) {
          queryParameters = this.addToHttpParams(queryParameters,
            <any>_size, 'size');
        }
        if (_sort) {
            _sort.forEach((element) => {
                queryParameters = this.addToHttpParams(queryParameters,
                  <any>element, 'sort');
            })
        }

        let headers = this.defaultHeaders;

        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }


        let responseType: 'text' | 'json' = 'json';
        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }

        return this.httpClient.get<Array<BoatProduct>>(`${this.configuration.basePath}/api/boat/portals/${encodeURIComponent(String(_portalKey))}/products`,
            {
                params: queryParameters,
                responseType: <any>responseType,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    public getPortalProductsUrl(requestParameters: GetPortalProductsRequestParams): string {
        const _portalKey = requestParameters["portalKey"];
        if (_portalKey === null || _portalKey === undefined) {
            throw new Error('Required parameter portalKey was null or undefined when calling getPortalProducts.');
        }
        const _page = requestParameters["page"];
        if (_page === null || _page === undefined) {
            throw new Error('Required parameter page was null or undefined when calling getPortalProducts.');
        }
        const _size = requestParameters["size"];
        if (_size === null || _size === undefined) {
            throw new Error('Required parameter size was null or undefined when calling getPortalProducts.');
        }
        const _sort = requestParameters["sort"];
        if (_sort === null || _sort === undefined) {
            throw new Error('Required parameter sort was null or undefined when calling getPortalProducts.');
        }
        let queryParameters = new HttpParams({encoder: this.encoder});
        if (_page !== undefined && _page !== null) {
          queryParameters = this.addToHttpParams(queryParameters,
            <any>_page, 'page');
        }
        if (_size !== undefined && _size !== null) {
          queryParameters = this.addToHttpParams(queryParameters,
            <any>_size, 'size');
        }
        if (_sort) {
            _sort.forEach((element) => {
                queryParameters = this.addToHttpParams(queryParameters,
                  <any>element, 'sort');
            })
        }
        const queryString = queryParameters.toString();
        return `${this.configuration.basePath}/api/boat/portals/${encodeURIComponent(String(_portalKey))}/products${queryString ? `?${queryString}` : ''}`;
    }

    /**
     * get Portal services for a given product
     * @param requestParameters
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getPortalServices(requestParameters: GetPortalServicesRequestParams, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<Array<BoatService>>;
    public getPortalServices(requestParameters: GetPortalServicesRequestParams, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpResponse<Array<BoatService>>>;
    public getPortalServices(requestParameters: GetPortalServicesRequestParams, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpEvent<Array<BoatService>>>;
    public getPortalServices(requestParameters: GetPortalServicesRequestParams, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json'}): Observable<any> {
        const _portalKey = requestParameters["portalKey"];
        if (_portalKey === null || _portalKey === undefined) {
            throw new Error('Required parameter portalKey was null or undefined when calling getPortalServices.');
        }
        const _productKey = requestParameters["productKey"];
        if (_productKey === null || _productKey === undefined) {
            throw new Error('Required parameter productKey was null or undefined when calling getPortalServices.');
        }
        const _page = requestParameters["page"];
        if (_page === null || _page === undefined) {
            throw new Error('Required parameter page was null or undefined when calling getPortalServices.');
        }
        const _size = requestParameters["size"];
        if (_size === null || _size === undefined) {
            throw new Error('Required parameter size was null or undefined when calling getPortalServices.');
        }
        const _sort = requestParameters["sort"];
        if (_sort === null || _sort === undefined) {
            throw new Error('Required parameter sort was null or undefined when calling getPortalServices.');
        }

        let queryParameters = new HttpParams({encoder: this.encoder});
        if (_page !== undefined && _page !== null) {
          queryParameters = this.addToHttpParams(queryParameters,
            <any>_page, 'page');
        }
        if (_size !== undefined && _size !== null) {
          queryParameters = this.addToHttpParams(queryParameters,
            <any>_size, 'size');
        }
        if (_sort) {
            _sort.forEach((element) => {
                queryParameters = this.addToHttpParams(queryParameters,
                  <any>element, 'sort');
            })
        }

        let headers = this.defaultHeaders;

        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }


        let responseType: 'text' | 'json' = 'json';
        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }

        return this.httpClient.get<Array<BoatService>>(`${this.configuration.basePath}/api/boat/portals/${encodeURIComponent(String(_portalKey))}/products/${encodeURIComponent(String(_productKey))}/services`,
            {
                params: queryParameters,
                responseType: <any>responseType,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    public getPortalServicesUrl(requestParameters: GetPortalServicesRequestParams): string {
        const _portalKey = requestParameters["portalKey"];
        if (_portalKey === null || _portalKey === undefined) {
            throw new Error('Required parameter portalKey was null or undefined when calling getPortalServices.');
        }
        const _productKey = requestParameters["productKey"];
        if (_productKey === null || _productKey === undefined) {
            throw new Error('Required parameter productKey was null or undefined when calling getPortalServices.');
        }
        const _page = requestParameters["page"];
        if (_page === null || _page === undefined) {
            throw new Error('Required parameter page was null or undefined when calling getPortalServices.');
        }
        const _size = requestParameters["size"];
        if (_size === null || _size === undefined) {
            throw new Error('Required parameter size was null or undefined when calling getPortalServices.');
        }
        const _sort = requestParameters["sort"];
        if (_sort === null || _sort === undefined) {
            throw new Error('Required parameter sort was null or undefined when calling getPortalServices.');
        }
        let queryParameters = new HttpParams({encoder: this.encoder});
        if (_page !== undefined && _page !== null) {
          queryParameters = this.addToHttpParams(queryParameters,
            <any>_page, 'page');
        }
        if (_size !== undefined && _size !== null) {
          queryParameters = this.addToHttpParams(queryParameters,
            <any>_size, 'size');
        }
        if (_sort) {
            _sort.forEach((element) => {
                queryParameters = this.addToHttpParams(queryParameters,
                  <any>element, 'sort');
            })
        }
        const queryString = queryParameters.toString();
        return `${this.configuration.basePath}/api/boat/portals/${encodeURIComponent(String(_portalKey))}/products/${encodeURIComponent(String(_productKey))}/services${queryString ? `?${queryString}` : ''}`;
    }

    /**
     * Get Portal Specs for given product
     * @param requestParameters
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getPortalSpecs(requestParameters: GetPortalSpecsRequestParams, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<Array<BoatSpec>>;
    public getPortalSpecs(requestParameters: GetPortalSpecsRequestParams, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpResponse<Array<BoatSpec>>>;
    public getPortalSpecs(requestParameters: GetPortalSpecsRequestParams, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpEvent<Array<BoatSpec>>>;
    public getPortalSpecs(requestParameters: GetPortalSpecsRequestParams, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json'}): Observable<any> {
        const _portalKey = requestParameters["portalKey"];
        if (_portalKey === null || _portalKey === undefined) {
            throw new Error('Required parameter portalKey was null or undefined when calling getPortalSpecs.');
        }
        const _productKey = requestParameters["productKey"];
        if (_productKey === null || _productKey === undefined) {
            throw new Error('Required parameter productKey was null or undefined when calling getPortalSpecs.');
        }
        const _page = requestParameters["page"];
        if (_page === null || _page === undefined) {
            throw new Error('Required parameter page was null or undefined when calling getPortalSpecs.');
        }
        const _size = requestParameters["size"];
        if (_size === null || _size === undefined) {
            throw new Error('Required parameter size was null or undefined when calling getPortalSpecs.');
        }
        const _sort = requestParameters["sort"];
        if (_sort === null || _sort === undefined) {
            throw new Error('Required parameter sort was null or undefined when calling getPortalSpecs.');
        }
        const _capabilityKeys = requestParameters["capabilityKeys"];
        const _productReleaseKey = requestParameters["productReleaseKey"];
        const _serviceKeys = requestParameters["serviceKeys"];
        const _grade = requestParameters["grade"];
        const _backwardsCompatible = requestParameters["backwardsCompatible"];
        const _changed = requestParameters["changed"];

        let queryParameters = new HttpParams({encoder: this.encoder});
        if (_page !== undefined && _page !== null) {
          queryParameters = this.addToHttpParams(queryParameters,
            <any>_page, 'page');
        }
        if (_size !== undefined && _size !== null) {
          queryParameters = this.addToHttpParams(queryParameters,
            <any>_size, 'size');
        }
        if (_sort) {
            _sort.forEach((element) => {
                queryParameters = this.addToHttpParams(queryParameters,
                  <any>element, 'sort');
            })
        }
        if (_capabilityKeys) {
            _capabilityKeys.forEach((element) => {
                queryParameters = this.addToHttpParams(queryParameters,
                  <any>element, 'capabilityKeys');
            })
        }
        if (_productReleaseKey !== undefined && _productReleaseKey !== null) {
          queryParameters = this.addToHttpParams(queryParameters,
            <any>_productReleaseKey, 'productReleaseKey');
        }
        if (_serviceKeys) {
            _serviceKeys.forEach((element) => {
                queryParameters = this.addToHttpParams(queryParameters,
                  <any>element, 'serviceKeys');
            })
        }
        if (_grade !== undefined && _grade !== null) {
          queryParameters = this.addToHttpParams(queryParameters,
            <any>_grade, 'grade');
        }
        if (_backwardsCompatible !== undefined && _backwardsCompatible !== null) {
          queryParameters = this.addToHttpParams(queryParameters,
            <any>_backwardsCompatible, 'backwardsCompatible');
        }
        if (_changed !== undefined && _changed !== null) {
          queryParameters = this.addToHttpParams(queryParameters,
            <any>_changed, 'changed');
        }

        let headers = this.defaultHeaders;

        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }


        let responseType: 'text' | 'json' = 'json';
        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }

        return this.httpClient.get<Array<BoatSpec>>(`${this.configuration.basePath}/api/boat/portals/${encodeURIComponent(String(_portalKey))}/products/${encodeURIComponent(String(_productKey))}/specs`,
            {
                params: queryParameters,
                responseType: <any>responseType,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    public getPortalSpecsUrl(requestParameters: GetPortalSpecsRequestParams): string {
        const _portalKey = requestParameters["portalKey"];
        if (_portalKey === null || _portalKey === undefined) {
            throw new Error('Required parameter portalKey was null or undefined when calling getPortalSpecs.');
        }
        const _productKey = requestParameters["productKey"];
        if (_productKey === null || _productKey === undefined) {
            throw new Error('Required parameter productKey was null or undefined when calling getPortalSpecs.');
        }
        const _page = requestParameters["page"];
        if (_page === null || _page === undefined) {
            throw new Error('Required parameter page was null or undefined when calling getPortalSpecs.');
        }
        const _size = requestParameters["size"];
        if (_size === null || _size === undefined) {
            throw new Error('Required parameter size was null or undefined when calling getPortalSpecs.');
        }
        const _sort = requestParameters["sort"];
        if (_sort === null || _sort === undefined) {
            throw new Error('Required parameter sort was null or undefined when calling getPortalSpecs.');
        }
        const _capabilityKeys = requestParameters["capabilityKeys"];
        const _productReleaseKey = requestParameters["productReleaseKey"];
        const _serviceKeys = requestParameters["serviceKeys"];
        const _grade = requestParameters["grade"];
        const _backwardsCompatible = requestParameters["backwardsCompatible"];
        const _changed = requestParameters["changed"];
        let queryParameters = new HttpParams({encoder: this.encoder});
        if (_page !== undefined && _page !== null) {
          queryParameters = this.addToHttpParams(queryParameters,
            <any>_page, 'page');
        }
        if (_size !== undefined && _size !== null) {
          queryParameters = this.addToHttpParams(queryParameters,
            <any>_size, 'size');
        }
        if (_sort) {
            _sort.forEach((element) => {
                queryParameters = this.addToHttpParams(queryParameters,
                  <any>element, 'sort');
            })
        }
        if (_capabilityKeys) {
            _capabilityKeys.forEach((element) => {
                queryParameters = this.addToHttpParams(queryParameters,
                  <any>element, 'capabilityKeys');
            })
        }
        if (_productReleaseKey !== undefined && _productReleaseKey !== null) {
          queryParameters = this.addToHttpParams(queryParameters,
            <any>_productReleaseKey, 'productReleaseKey');
        }
        if (_serviceKeys) {
            _serviceKeys.forEach((element) => {
                queryParameters = this.addToHttpParams(queryParameters,
                  <any>element, 'serviceKeys');
            })
        }
        if (_grade !== undefined && _grade !== null) {
          queryParameters = this.addToHttpParams(queryParameters,
            <any>_grade, 'grade');
        }
        if (_backwardsCompatible !== undefined && _backwardsCompatible !== null) {
          queryParameters = this.addToHttpParams(queryParameters,
            <any>_backwardsCompatible, 'backwardsCompatible');
        }
        if (_changed !== undefined && _changed !== null) {
          queryParameters = this.addToHttpParams(queryParameters,
            <any>_changed, 'changed');
        }
        const queryString = queryParameters.toString();
        return `${this.configuration.basePath}/api/boat/portals/${encodeURIComponent(String(_portalKey))}/products/${encodeURIComponent(String(_productKey))}/specs${queryString ? `?${queryString}` : ''}`;
    }

    /**
     * Get list of Portals
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getPortals(observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<Array<BoatPortal>>;
    public getPortals(observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpResponse<Array<BoatPortal>>>;
    public getPortals(observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpEvent<Array<BoatPortal>>>;
    public getPortals(observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json'}): Observable<any> {

        let headers = this.defaultHeaders;

        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }


        let responseType: 'text' | 'json' = 'json';
        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }

        return this.httpClient.get<Array<BoatPortal>>(`${this.configuration.basePath}/api/boat/portals`,
            {
                responseType: <any>responseType,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    public getPortalsUrl(): string {
        return `${this.configuration.basePath}/api/boat/portals`;
    }

    /**
     * get specs for product release
     * @param requestParameters
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getProductReleaseSpecs(requestParameters: GetProductReleaseSpecsRequestParams, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<Array<BoatSpec>>;
    public getProductReleaseSpecs(requestParameters: GetProductReleaseSpecsRequestParams, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpResponse<Array<BoatSpec>>>;
    public getProductReleaseSpecs(requestParameters: GetProductReleaseSpecsRequestParams, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpEvent<Array<BoatSpec>>>;
    public getProductReleaseSpecs(requestParameters: GetProductReleaseSpecsRequestParams, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json'}): Observable<any> {
        const _portalKey = requestParameters["portalKey"];
        if (_portalKey === null || _portalKey === undefined) {
            throw new Error('Required parameter portalKey was null or undefined when calling getProductReleaseSpecs.');
        }
        const _productKey = requestParameters["productKey"];
        if (_productKey === null || _productKey === undefined) {
            throw new Error('Required parameter productKey was null or undefined when calling getProductReleaseSpecs.');
        }
        const _releaseKey = requestParameters["releaseKey"];
        if (_releaseKey === null || _releaseKey === undefined) {
            throw new Error('Required parameter releaseKey was null or undefined when calling getProductReleaseSpecs.');
        }

        let headers = this.defaultHeaders;

        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }


        let responseType: 'text' | 'json' = 'json';
        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }

        return this.httpClient.get<Array<BoatSpec>>(`${this.configuration.basePath}/api/boat/portals/${encodeURIComponent(String(_portalKey))}/products/${encodeURIComponent(String(_productKey))}/releases/${encodeURIComponent(String(_releaseKey))}/specs`,
            {
                responseType: <any>responseType,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    public getProductReleaseSpecsUrl(requestParameters: GetProductReleaseSpecsRequestParams): string {
        const _portalKey = requestParameters["portalKey"];
        if (_portalKey === null || _portalKey === undefined) {
            throw new Error('Required parameter portalKey was null or undefined when calling getProductReleaseSpecs.');
        }
        const _productKey = requestParameters["productKey"];
        if (_productKey === null || _productKey === undefined) {
            throw new Error('Required parameter productKey was null or undefined when calling getProductReleaseSpecs.');
        }
        const _releaseKey = requestParameters["releaseKey"];
        if (_releaseKey === null || _releaseKey === undefined) {
            throw new Error('Required parameter releaseKey was null or undefined when calling getProductReleaseSpecs.');
        }
        return `${this.configuration.basePath}/api/boat/portals/${encodeURIComponent(String(_portalKey))}/products/${encodeURIComponent(String(_productKey))}/releases/${encodeURIComponent(String(_releaseKey))}/specs`;
    }

    /**
     * get product releases
     * @param requestParameters
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getProductReleases(requestParameters: GetProductReleasesRequestParams, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<Array<BoatProductRelease>>;
    public getProductReleases(requestParameters: GetProductReleasesRequestParams, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpResponse<Array<BoatProductRelease>>>;
    public getProductReleases(requestParameters: GetProductReleasesRequestParams, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpEvent<Array<BoatProductRelease>>>;
    public getProductReleases(requestParameters: GetProductReleasesRequestParams, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json'}): Observable<any> {
        const _portalKey = requestParameters["portalKey"];
        if (_portalKey === null || _portalKey === undefined) {
            throw new Error('Required parameter portalKey was null or undefined when calling getProductReleases.');
        }
        const _productKey = requestParameters["productKey"];
        if (_productKey === null || _productKey === undefined) {
            throw new Error('Required parameter productKey was null or undefined when calling getProductReleases.');
        }

        let headers = this.defaultHeaders;

        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }


        let responseType: 'text' | 'json' = 'json';
        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }

        return this.httpClient.get<Array<BoatProductRelease>>(`${this.configuration.basePath}/api/boat/portals/${encodeURIComponent(String(_portalKey))}/products/${encodeURIComponent(String(_productKey))}/releases`,
            {
                responseType: <any>responseType,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    public getProductReleasesUrl(requestParameters: GetProductReleasesRequestParams): string {
        const _portalKey = requestParameters["portalKey"];
        if (_portalKey === null || _portalKey === undefined) {
            throw new Error('Required parameter portalKey was null or undefined when calling getProductReleases.');
        }
        const _productKey = requestParameters["productKey"];
        if (_productKey === null || _productKey === undefined) {
            throw new Error('Required parameter productKey was null or undefined when calling getProductReleases.');
        }
        return `${this.configuration.basePath}/api/boat/portals/${encodeURIComponent(String(_portalKey))}/products/${encodeURIComponent(String(_productKey))}/releases`;
    }

    /**
     * get tags for product
     * @param requestParameters
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getProductTags(requestParameters: GetProductTagsRequestParams, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<Array<BoatTag>>;
    public getProductTags(requestParameters: GetProductTagsRequestParams, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpResponse<Array<BoatTag>>>;
    public getProductTags(requestParameters: GetProductTagsRequestParams, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpEvent<Array<BoatTag>>>;
    public getProductTags(requestParameters: GetProductTagsRequestParams, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json'}): Observable<any> {
        const _portalKey = requestParameters["portalKey"];
        if (_portalKey === null || _portalKey === undefined) {
            throw new Error('Required parameter portalKey was null or undefined when calling getProductTags.');
        }
        const _productKey = requestParameters["productKey"];
        if (_productKey === null || _productKey === undefined) {
            throw new Error('Required parameter productKey was null or undefined when calling getProductTags.');
        }

        let headers = this.defaultHeaders;

        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }


        let responseType: 'text' | 'json' = 'json';
        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }

        return this.httpClient.get<Array<BoatTag>>(`${this.configuration.basePath}/api/boat/portals/${encodeURIComponent(String(_portalKey))}/products/${encodeURIComponent(String(_productKey))}/tags`,
            {
                responseType: <any>responseType,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    public getProductTagsUrl(requestParameters: GetProductTagsRequestParams): string {
        const _portalKey = requestParameters["portalKey"];
        if (_portalKey === null || _portalKey === undefined) {
            throw new Error('Required parameter portalKey was null or undefined when calling getProductTags.');
        }
        const _productKey = requestParameters["productKey"];
        if (_productKey === null || _productKey === undefined) {
            throw new Error('Required parameter productKey was null or undefined when calling getProductTags.');
        }
        return `${this.configuration.basePath}/api/boat/portals/${encodeURIComponent(String(_portalKey))}/products/${encodeURIComponent(String(_productKey))}/tags`;
    }

    /**
     * Get Open API Spec
     * @param requestParameters
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getSpec(requestParameters: GetSpecRequestParams, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<BoatSpec>;
    public getSpec(requestParameters: GetSpecRequestParams, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpResponse<BoatSpec>>;
    public getSpec(requestParameters: GetSpecRequestParams, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpEvent<BoatSpec>>;
    public getSpec(requestParameters: GetSpecRequestParams, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json'}): Observable<any> {
        const _portalKey = requestParameters["portalKey"];
        if (_portalKey === null || _portalKey === undefined) {
            throw new Error('Required parameter portalKey was null or undefined when calling getSpec.');
        }
        const _productKey = requestParameters["productKey"];
        if (_productKey === null || _productKey === undefined) {
            throw new Error('Required parameter productKey was null or undefined when calling getSpec.');
        }
        const _capabilityKey = requestParameters["capabilityKey"];
        if (_capabilityKey === null || _capabilityKey === undefined) {
            throw new Error('Required parameter capabilityKey was null or undefined when calling getSpec.');
        }
        const _serviceKey = requestParameters["serviceKey"];
        if (_serviceKey === null || _serviceKey === undefined) {
            throw new Error('Required parameter serviceKey was null or undefined when calling getSpec.');
        }
        const _specKey = requestParameters["specKey"];
        if (_specKey === null || _specKey === undefined) {
            throw new Error('Required parameter specKey was null or undefined when calling getSpec.');
        }
        const _version = requestParameters["version"];
        if (_version === null || _version === undefined) {
            throw new Error('Required parameter version was null or undefined when calling getSpec.');
        }

        let headers = this.defaultHeaders;

        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }


        let responseType: 'text' | 'json' = 'json';
        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }

        return this.httpClient.get<BoatSpec>(`${this.configuration.basePath}/api/boat/portals/${encodeURIComponent(String(_portalKey))}/products/${encodeURIComponent(String(_productKey))}/capabilities/${encodeURIComponent(String(_capabilityKey))}/services/${encodeURIComponent(String(_serviceKey))}/specs/${encodeURIComponent(String(_specKey))}/${encodeURIComponent(String(_version))}`,
            {
                responseType: <any>responseType,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    public getSpecUrl(requestParameters: GetSpecRequestParams): string {
        const _portalKey = requestParameters["portalKey"];
        if (_portalKey === null || _portalKey === undefined) {
            throw new Error('Required parameter portalKey was null or undefined when calling getSpec.');
        }
        const _productKey = requestParameters["productKey"];
        if (_productKey === null || _productKey === undefined) {
            throw new Error('Required parameter productKey was null or undefined when calling getSpec.');
        }
        const _capabilityKey = requestParameters["capabilityKey"];
        if (_capabilityKey === null || _capabilityKey === undefined) {
            throw new Error('Required parameter capabilityKey was null or undefined when calling getSpec.');
        }
        const _serviceKey = requestParameters["serviceKey"];
        if (_serviceKey === null || _serviceKey === undefined) {
            throw new Error('Required parameter serviceKey was null or undefined when calling getSpec.');
        }
        const _specKey = requestParameters["specKey"];
        if (_specKey === null || _specKey === undefined) {
            throw new Error('Required parameter specKey was null or undefined when calling getSpec.');
        }
        const _version = requestParameters["version"];
        if (_version === null || _version === undefined) {
            throw new Error('Required parameter version was null or undefined when calling getSpec.');
        }
        return `${this.configuration.basePath}/api/boat/portals/${encodeURIComponent(String(_portalKey))}/products/${encodeURIComponent(String(_productKey))}/capabilities/${encodeURIComponent(String(_capabilityKey))}/services/${encodeURIComponent(String(_serviceKey))}/specs/${encodeURIComponent(String(_specKey))}/${encodeURIComponent(String(_version))}`;
    }

    /**
     * update lint rule for portal
     * @param requestParameters
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public updatePortalLintRule(requestParameters: UpdatePortalLintRuleRequestParams, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: undefined}): Observable<any> {
        const _lintRuleId = requestParameters["lintRuleId"];
        if (_lintRuleId === null || _lintRuleId === undefined) {
            throw new Error('Required parameter lintRuleId was null or undefined when calling updatePortalLintRule.');
        }
        const _portalKey = requestParameters["portalKey"];
        if (_portalKey === null || _portalKey === undefined) {
            throw new Error('Required parameter portalKey was null or undefined when calling updatePortalLintRule.');
        }
        const _boatLintRule = requestParameters["boatLintRule"];

        let headers = this.defaultHeaders;

        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }


        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        let responseType: 'text' | 'json' = 'json';
        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }

        return this.httpClient.post<any>(`${this.configuration.basePath}/api/boat/portals/${encodeURIComponent(String(_portalKey))}/lint-rules/${encodeURIComponent(String(_lintRuleId))}`,
            _boatLintRule,
            {
                responseType: <any>responseType,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    public updatePortalLintRuleUrl(requestParameters: UpdatePortalLintRuleRequestParams): string {
        const _lintRuleId = requestParameters["lintRuleId"];
        if (_lintRuleId === null || _lintRuleId === undefined) {
            throw new Error('Required parameter lintRuleId was null or undefined when calling updatePortalLintRule.');
        }
        const _portalKey = requestParameters["portalKey"];
        if (_portalKey === null || _portalKey === undefined) {
            throw new Error('Required parameter portalKey was null or undefined when calling updatePortalLintRule.');
        }
        const _boatLintRule = requestParameters["boatLintRule"];
        return `${this.configuration.basePath}/api/boat/portals/${encodeURIComponent(String(_portalKey))}/lint-rules/${encodeURIComponent(String(_lintRuleId))}`;
    }

}
